{"version":3,"sources":["helpers/validators.js","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/DialogForm.js","components/Dialogs/Dialogs.jsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.jsx"],"names":["__webpack_require__","d","__webpack_exports__","required","renderField","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","value","undefined","_ref","input","type","placeholder","className","_ref$meta","meta","touched","error","a","createElement","Object","assign","module","exports","dialogs","dialogsItems","item","active","messages","message","answerWrapp","answerTextarea","answerButton","DialogItem","props","path","concat","id","react_default","classes","react_router_dom","to","name","Message","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","Dialogs","dialogElement","dialogsData","map","dialog","Dialogs_DialogItem_DialogItem","key","messageElement","messagesData","messageItem","Dialogs_Message_Message","isLogged","react_router","Dialogs_DialogForm","formData","addAnswer","dialogText","mapStateToPropsForRedirect","state","auth","compose","connect","dispatch","text","addMessageText","Component","RedirectComponent","_React$Component","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","React"],"mappings":"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","file":"static/js/7.de8ed096.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const required = value => (value ? undefined : 'Required');\n\nexport const renderField =\n  ({\n     input,\n     type,\n     placeholder,\n     className,\n     meta: {touched, error}\n   }) => (\n    <div>\n      <input {...input} placeholder={placeholder} className={className} type={type}/>\n      {\n        touched && (error && <span> {error} </span>)\n      }\n    </div>\n  )","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2RVF2\",\"dialogsItems\":\"Dialogs_dialogsItems__3z8tT\",\"item\":\"Dialogs_item__3_CFX\",\"active\":\"Dialogs_active__2iHOM\",\"messages\":\"Dialogs_messages__2Ry-3\",\"message\":\"Dialogs_message__LWa7c\",\"answerWrapp\":\"Dialogs_answerWrapp__3BycL\",\"answerTextarea\":\"Dialogs_answerTextarea__2SnPD\",\"answerButton\":\"Dialogs_answerButton__2-7FJ\"};","import React from \"react\"\nimport classes from \"../Dialogs.module.css\";\nimport {NavLink} from \"react-router-dom\";\n\nconst DialogItem = (props) => {\n  const path = `/dialogs/${props.id}`;\n\n  return (\n    <div className={classes.item}>\n      <NavLink to={path}>{props.name}</NavLink>\n    </div>\n  )\n}\n\nexport default DialogItem","import React from \"react\";\nimport classes from \"../Dialogs.module.css\";\n\nconst Message = (props) => {\n  return (\n    <div className={classes.message}>{props.message}</div>\n  )\n}\n\nexport default Message;","import React from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport {Field, reduxForm } from \"redux-form\";\nimport { required } from '../../helpers/validators';\nimport { renderField } from '../../helpers/validators';\n\nconst DialogForm = (props) => {\n  return (\n    <form onSubmit={props.handleSubmit}>\n      <Field\n        type=\"textarea\"\n        component={renderField}\n        name=\"dialogText\"\n        className={classes.answerTextarea}\n        validate={[required]}\n      />\n      <button\n        className={classes.answerButton}\n      >\n        App Answer\n      </button>\n    </form>\n  )\n}\n\nexport default reduxForm({\n  form: 'dialogForm' // a unique identifier for this form\n})(DialogForm)","import React from \"react\";\nimport classes from \"./Dialogs.module.css\";\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {Redirect} from \"react-router-dom\";\nimport DialogReduxForm from \"./DialogForm\";\n\nconst Dialogs = (props) => {\n\n  const dialogElement = props.dialogsData.map((dialog) => {\n    return <DialogItem name={dialog.name} id={dialog.id} key={dialog.id}/>\n  })\n\n  const messageElement = props.messagesData.map((messageItem) => {\n    return <Message message={messageItem.message} key={messageItem.id}/>\n  })\n\n  if(!props.isLogged) {\n    return <Redirect to=\"/login\"/>\n  }\n\n  const onSubmit = (formData) => {\n    props.addAnswer(formData.dialogText)\n  }\n\n  return (\n    <div className={classes.dialogs}>\n      <div className={classes.dialogsItems}>\n        { dialogElement }\n      </div>\n      <div className={classes.messages}>\n        { messageElement }\n        <div className={classes.answerWrapp}>\n          <DialogReduxForm onSubmit={onSubmit}/>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Dialogs;","import React from 'react'\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nlet mapStateToPropsForRedirect = (state) => ({\n  isLogged: state.auth.isLogged,\n})\n\nexport const withAuthRedirect = (Component) => {\n  class RedirectComponent extends React.Component {\n    render () {\n\n      if(!this.props.isLogged) {\n        return <Redirect to=\"/login\"/>\n      }\n\n      return <Component {...this.props}/>\n    }\n  }\n\n  let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n  return ConnectedAuthRedirectComponent;\n}","import { addMessageText } from \"../../redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport connect from \"react-redux/lib/connect/connect\";\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {compose} from \"redux\";\n\nlet mapStateToProps = (state) => {\n  return {\n    dialogsData: state.dialogs.dialogsData,\n    messagesData: state.dialogs.messagesData,\n  }\n}\nlet mapDispatchToProps = (dispatch) => {\n  return {\n    addAnswer: (text) => {\n      dispatch(addMessageText(text))\n    },\n  }\n}\n\nexport default compose (\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect\n  )(Dialogs)\n"],"sourceRoot":""}